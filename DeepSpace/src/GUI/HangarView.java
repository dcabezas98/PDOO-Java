/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;
import deepspace.HangarToUI;
import deepspace.ShieldToUI;
import deepspace.WeaponToUI;
import java.util.ArrayList;
import java.awt.Component;

/**
 *
 * @author David Cabezas Berrido
 * @author Patricia CÃ³rdoba Hidalgo
 */

public class HangarView extends javax.swing.JPanel {

    /**
     * Creates new form HangarView
     */
    public HangarView() {
        initComponents();
    }

    void setHangar(HangarToUI h){
        String title = "Hangar con capacidad " + Integer.toString(h.getMaxElements());
        pItems.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0)),title));
        
        pItems.removeAll();
        ArrayList<WeaponToUI> w = h.getWeapons();
        ArrayList<ShieldToUI> s = h.getShieldBoosters();
        WeaponView wv;
        ShieldBoosterView sv;
        
        for(WeaponToUI x : w){
            wv = new WeaponView();
            wv.setWeapon(x);
            pItems.add(wv);
        }
        
        for(ShieldToUI x : s){
            sv = new ShieldBoosterView();
            sv.setShieldBooster(x);
            pItems.add(sv);
        }
        
        repaint();
        revalidate();
    }
    
    ArrayList<Integer> getSelectedItems(){
        ArrayList<Integer> sItems = new ArrayList();
        int i = 0;
        for(Component c : pItems.getComponents()){
            if(((CombatElementView) c).isSelected()){    //Averiguar si es weaponView o shieldView
                sItems.add(i);
            }
            i++;
        }
        return sItems;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollItems = new javax.swing.JScrollPane();
        pItems = new javax.swing.JPanel();

        setBorder(null);

        scrollItems.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        pItems.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Hangar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12))); // NOI18N
        scrollItems.setViewportView(pItems);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollItems, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollItems, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pItems;
    private javax.swing.JScrollPane scrollItems;
    // End of variables declaration//GEN-END:variables
}
